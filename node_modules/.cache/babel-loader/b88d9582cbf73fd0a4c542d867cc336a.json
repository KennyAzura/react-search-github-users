{"ast":null,"code":"var _jsxFileName = \"F:\\\\App\\\\react-app\\\\github-users\\\\src\\\\context\\\\context.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\nconst rootUrl = 'https://api.github.com';\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers); // requests loading\n\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsLoading] = useState(false); // error\n\n  const [error, setError] = useState(false); // check requests\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`).then(({\n      data\n    }) => {\n      let {\n        rate: {\n          remaining\n        }\n      } = data;\n      setRequests(remaining);\n\n      if (remaining === 0) {}\n    }).catch(err => console.log(err));\n  };\n\n  fun;\n  useEffect(() => {\n    checkRequests();\n  }, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser,\n      repos,\n      followers,\n      requests\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }\n  }, children);\n};\n\nexport const useGlobalContext = () => {\n  return useContext(GithubContext);\n};\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["F:/App/react-app/github-users/src/context/context.js"],"names":["React","useState","useEffect","useContext","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","isLoading","setIsLoading","error","setError","checkRequests","then","data","rate","remaining","catch","err","console","log","fun","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGT,KAAK,CAACU,aAAN,EAAtB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAACG,QAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACI,SAAD,CAAlC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAACK,aAAD,CAA1C,CAHmC,CAInC;;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,KAAD,CAA1C,CANmC,CAOnC;;AACA,QAAM,CAACsB,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,KAAD,CAAlC,CARmC,CASnC;;AACA,QAAMwB,aAAa,GAAG,MAAM;AACxBlB,IAAAA,KAAK,CAAE,GAAEC,OAAQ,aAAZ,CAAL,CACKkB,IADL,CACU,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAY;AACd,UAAI;AAACC,QAAAA,IAAI,EAAE;AAACC,UAAAA;AAAD;AAAP,UAAsBF,IAA1B;AACAP,MAAAA,WAAW,CAACS,SAAD,CAAX;;AACA,UAAGA,SAAS,KAAK,CAAjB,EAAoB,CAEnB;AACJ,KAPL,EAQKC,KARL,CAQYC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CARpB;AASH,GAVD;;AAYAG,EAAAA,GAAG;AAEHhC,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,aAAa;AAChB,GAFQ,EAEN,EAFM,CAAT;AAGA,sBAAO,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAACZ,MAAAA,UAAD;AAAaE,MAAAA,KAAb;AAAoBE,MAAAA,SAApB;AAA+BE,MAAAA;AAA/B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0EP,QAA1E,CAAP;AACH,CA5BD;;AA8BA,OAAO,MAAMuB,gBAAgB,GAAG,MAAM;AAClC,SAAOhC,UAAU,CAACM,aAAD,CAAjB;AACH,CAFM;AAIP,SAAQE,cAAR,EAAwBF,aAAxB","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport mockUser from './mockData.js/mockUser';\nimport mockRepos from './mockData.js/mockRepos';\nimport mockFollowers from './mockData.js/mockFollowers';\nimport axios from 'axios';\n\nconst rootUrl = 'https://api.github.com';\n\nconst GithubContext = React.createContext()\n\nconst GithubProvider = ({children}) => {\n    const [githubUser, setGithubUser] = useState(mockUser)\n    const [repos, setRepos] = useState(mockRepos)\n    const [followers, setFollowers] = useState(mockFollowers)\n    // requests loading\n    const [requests, setRequests] = useState(0)\n    const [isLoading, setIsLoading] = useState(false)\n    // error\n    const [error, setError] = useState(false)\n    // check requests\n    const checkRequests = () => {\n        axios(`${rootUrl}/rate_limit`)\n            .then(({data}) => {\n                let {rate: {remaining}} = data\n                setRequests(remaining)\n                if(remaining === 0) {\n\n                }\n            })\n            .catch((err) => console.log(err))\n    }\n    \n    fun\n\n    useEffect(() => {\n        checkRequests();\n    }, [])\n    return <GithubContext.Provider value={{githubUser, repos, followers, requests}}>{children}</GithubContext.Provider>\n}\n\nexport const useGlobalContext = () => {\n    return useContext(GithubContext)\n}\n\nexport {GithubProvider, GithubContext}"]},"metadata":{},"sourceType":"module"}