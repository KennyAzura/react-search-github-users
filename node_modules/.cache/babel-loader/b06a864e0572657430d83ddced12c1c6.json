{"ast":null,"code":"var _jsxFileName = \"F:\\\\App\\\\react-app\\\\github-users\\\\src\\\\components\\\\Repos.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../context/context';\nimport { ExampleChart, Pie3D, Column3D, Bar3D, Doughnut2D } from './Charts';\n\nconst Repos = () => {\n  const {\n    repos\n  } = useGlobalContext();\n  const languages = repos.reduce((total, item) => {\n    const {\n      language,\n      stargazers_count\n    } = item;\n    if (!language) return total;\n\n    if (!total[language]) {\n      total[language] = {\n        label: language,\n        value: 1,\n        stars: stargazers_count\n      };\n    } else {\n      total[language] = { ...total[language],\n        value: total[language].value + 1,\n        stars: total[language].stars + stargazers_count\n      };\n    }\n\n    return total;\n  }, {});\n  const mostUsed = Object.values(languages).sort((a, b) => b.value - a.value).splice(0, 5);\n  const mostPopular = Object.values(languages).sort((a, b) => b.stars - a.stars).map(item => {\n    return { ...item,\n      value: item.stars\n    };\n  }).slice(0, 5);\n  const {\n    stars,\n    forks\n  } = repos.reduce((total, item) => {}, {});\n  const chartData = [{\n    label: \"HTML\",\n    value: \"13\"\n  }, {\n    label: \"CSS\",\n    value: \"23\"\n  }, {\n    label: \"Javasript\",\n    value: \"80\"\n  }];\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    className: \"section-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Pie3D, {\n    data: mostUsed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Column3D, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Doughnut2D, {\n    data: mostPopular,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Bar3D, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst Wrapper = styled.div`\n  display: grid;\n  justify-items: center;\n  gap: 2rem;\n  @media (min-width: 800px) {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media (min-width: 1200px) {\n    grid-template-columns: 2fr 3fr;\n  }\n\n  div {\n    width: 100% !important;\n  }\n  .fusioncharts-container {\n    width: 100% !important;\n  }\n  svg {\n    width: 100% !important;\n    border-radius: var(--radius) !important;\n  }\n`;\nexport default Repos;","map":{"version":3,"sources":["F:/App/react-app/github-users/src/components/Repos.js"],"names":["React","styled","useGlobalContext","ExampleChart","Pie3D","Column3D","Bar3D","Doughnut2D","Repos","repos","languages","reduce","total","item","language","stargazers_count","label","value","stars","mostUsed","Object","values","sort","a","b","splice","mostPopular","map","slice","forks","chartData","Wrapper","div"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../context/context';\nimport { ExampleChart, Pie3D, Column3D, Bar3D, Doughnut2D } from './Charts';\nconst Repos = () => {\n  const {repos} = useGlobalContext()\n  const languages = repos.reduce((total, item) => {\n    const {language, stargazers_count} = item\n    if(!language) return total;\n    if(!total[language]) {\n      total[language] = { label: language, value: 1, stars: stargazers_count };\n    } else {\n      total[language] = {\n        ...total[language],\n        value: total[language].value + 1,\n        stars: total[language].stars + stargazers_count,\n      };\n    }\n    return total\n  }, {})\n\n  const mostUsed = Object.values(languages).sort((a, b) => b.value - a.value).splice(0,5) \n\n  const mostPopular = Object.values(languages).sort((a, b) => b.stars - a.stars).map((item) => {\n    return { ...item, value: item.stars };\n  }).slice(0, 5)\n  \n  const {stars, forks} = repos.reduce((total, item) => {}, {})\n\n  const chartData = [\n    {\n      label: \"HTML\",\n      value: \"13\",\n    },\n    {\n      label: \"CSS\",\n      value: \"23\",\n    },\n    {\n      label: \"Javasript\",\n      value: \"80\",\n    },\n  ];\n  return (\n    <section className=\"section\">\n      <Wrapper className=\"section-center\">\n        <Pie3D data={mostUsed} />\n        <Column3D data={chartData} />\n        <Doughnut2D data={mostPopular} />\n        <Bar3D data={chartData} />\n      </Wrapper>\n    </section>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: grid;\n  justify-items: center;\n  gap: 2rem;\n  @media (min-width: 800px) {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  @media (min-width: 1200px) {\n    grid-template-columns: 2fr 3fr;\n  }\n\n  div {\n    width: 100% !important;\n  }\n  .fusioncharts-container {\n    width: 100% !important;\n  }\n  svg {\n    width: 100% !important;\n    border-radius: var(--radius) !important;\n  }\n`;\n\nexport default Repos;\n"]},"metadata":{},"sourceType":"module"}